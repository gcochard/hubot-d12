// Generated by CoffeeScript 1.6.3
(function() {
  var Fs, Hubot, OptParse, Options, Path, loadScripts, robot;

  Hubot = require('hubot');

  Fs = require('fs');

  OptParse = require('optparse');

  Path = require('path');

  Options = {
    adapter: process.env.HUBOT_ADAPTER || "slack",
    enableHttpd: process.env.HUBOT_HTTPD || true,
    scripts: process.env.HUBOT_SCRIPTS || [],
    name: process.env.HUBOT_NAME || "hubot",
    path: process.env.HUBOT_PATH || ".",
    configCheck: false
  };

  if (process.platform !== "win32") {
    process.on('SIGTERM', function() {
      return process.exit(0);
    });
  }

  robot = Hubot.loadBot(void 0, Options.adapter, Options.enableHttpd, Options.name, Options.alias);
   if (Options.version) {
     console.log(robot.version);
     process.exit(0);
   }
   loadScripts = function() {
     var data, err, externalScripts, hubotScripts, hubotScriptsReplacements, hubotScriptsWarning, path, replacement, replacements, replacementsData, script, scripts, scriptsPath, scriptsWithoutReplacements, _i, _j, _k, _len, _len1, _len2, _ref, _results;
     scriptsPath = Path.resolve(".", "scripts");
     robot.load(scriptsPath);
     scriptsPath = Path.resolve(".", "src", "scripts");
     robot.load(scriptsPath);
     hubotScripts = Path.resolve(".", "hubot-scripts.json");
     if (Fs.existsSync(hubotScripts)) {
       data = Fs.readFileSync(hubotScripts);
       if (data.length > 0) {
         try {
           scripts = JSON.parse(data);
           scriptsPath = Path.resolve("node_modules", "hubot-scripts", "src", "scripts");
           robot.loadHubotScripts(scriptsPath, scripts);
         } catch (_error) {
           err = _error;
           robot.logger.error("Error parsing JSON data from hubot-scripts.json: " + err);
           process.exit(1);
         }
         hubotScriptsWarning = "Loading scripts from hubot-scripts.json is deprecated and " + "will be removed in 3.0 (https://github.com/github/hubot-scripts/issues/1113) " + "in favor of packages for each script.\n\n";
         if (scripts.length === 0) {
           hubotScriptsWarning += "Your hubot-scripts.json is empty, so you just need to remove it.";
         } else {
           hubotScriptsReplacements = Path.resolve("node_modules", "hubot-scripts", "replacements.json");
           if (Fs.existsSync(hubotScriptsReplacements)) {
             hubotScriptsWarning += "The following scripts have known replacements. Follow the link for installation instructions, then remove it from hubot-scripts.json:\n";
             replacementsData = Fs.readFileSync(hubotScriptsReplacements);
             replacements = JSON.parse(replacementsData);
             scriptsWithoutReplacements = [];
             for (_i = 0, _len = scripts.length; _i < _len; _i++) {
               script = scripts[_i];
               replacement = replacements[script];
               if (replacement) {
                 hubotScriptsWarning += "* " + script + ": " + replacement + "\n";
               } else {
                 scriptsWithoutReplacements.push(script);
               }
             }
             hubotScriptsWarning += "\n";
             if (scriptsWithoutReplacements.length > 0) {
               hubotScriptsWarning += "The following scripts don't have (known) replacements. You can try searching https://www.npmjs.com/ or http://github.com/search or your favorite search engine. You can copy the script into your local scripts directory, or consider creating a new package to maintain yourself. If you find a replacement or create a package yourself, please post on https://github.com/github/hubot-scripts/issues/1641:\n";
               for (_j = 0, _len1 = scriptsWithoutReplacements.length; _j < _len1; _j++) {
                 script = scriptsWithoutReplacements[_j];
                 hubotScriptsWarning += "* " + script + "\n";
               }
               hubotScriptsWarning += "\nYou an also try updating hubot-scripts to get the latest list of replacements: npm install --save hubot-scripts@latest";
             }
           } else {
             hubotScriptsWarning += "To get a list of recommended replacements, update your hubot-scripts: npm install --save hubot-scripts@latest";
           }
         }
       }
       robot.logger.warning(hubotScriptsWarning);
     }
     externalScripts = Path.resolve(".", "external-scripts.json");
     if (Fs.existsSync(externalScripts)) {
       Fs.readFile(externalScripts, function(err, data) {
         if (data.length > 0) {
           try {
             scripts = JSON.parse(data);
           } catch (_error) {
             err = _error;
             console.error("Error parsing JSON data from external-scripts.json: " + err);
             process.exit(1);
           }
           return robot.loadExternalScripts(scripts);
         }
       });
     }
     _ref = Options.scripts;
     _results = [];
     for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
       path = _ref[_k];
       if (path[0] === '/') {
         scriptsPath = path;
       } else {
         scriptsPath = Path.resolve(".", path);
       }
       _results.push(robot.load(scriptsPath));
     }
     return _results;
   };
   if (Options.configCheck) {
     loadScripts();
     console.log("OK");
     process.exit(0);
   }
   robot.adapter.once('connected', loadScripts);
   robot.run();

}).call(this);
